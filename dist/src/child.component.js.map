{"version":3,"sources":["../../src/child.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACU,iBAAA,EAAmB,SAAA,EAAW,wBAAA,EAAwC,KAAA,EAC/E,SAAA,EACP,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,eAAA,EAAgB,MAAO,eAAA,CAAgB;AAEhD,OAAO,EAAE,6BAAA,EAA8B,MAAO,sCAAA,CAAuC;AAErF;;GAEG;AAEH;IA6BE,6BAAoB,UAA2B,EAAU,wBAAkD,EACvF,iBAAoC;QADpC,eAAU,GAAV,UAAU,CAAiB;QAAU,6BAAwB,GAAxB,wBAAwB,CAA0B;QACvF,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAG,CAAC;IAE5D,6CAAe,GAAf;QACE,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,yCAAW,GAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACvF,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAClF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,2CAAa,GAArB;QACE,IAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/F,IAAM,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC;QACtE,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAEzB,IAAI,CAAC,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;QAE3C,qCAAqC;QACrC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IACzC,CAAC;IACI,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,8DAET;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;QACzB,EAAC,IAAI,EAAE,wBAAwB,GAAG;QAClC,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAJ6F,CAI7F,CAAC;IACK,kCAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAClC,wBAAwB,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,6BAA6B,EAAG,EAAE,EAAE;KACxF,CAAC;IACF,0BAAC;CA3ED,AA2EC,IAAA;SA3EY,mBAAmB","file":"child.component.js","sourceRoot":"","sourcesContent":["import {\r\n  AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, SimpleChanges,\r\n  Type, ViewChild\r\n} from '@angular/core';\r\nimport { SharkTableUtils } from './table.utils';\r\nimport { SharkDynamicContents } from './dynamic/dynamic.contents';\r\nimport { SharkDynamicContentsDirective } from './dynamic/dynamic.contents.directive';\r\n\r\n/**\r\n * This Component is used to render your custom child row component.\r\n */\r\n\r\nexport class SharkChildComponent implements AfterViewInit, OnChanges {\r\n\r\n  /**\r\n   * Your custom component which extends {@link SharkDynamicContents} that will be used\r\n   * to render each child row. Your custom component needs to be registerd in your NgModule\r\n   * as an `entryComponent` and in the `declarations` section.\r\n   */\r\n  \r\n  component: Type<SharkDynamicContents>;\r\n\r\n  /**\r\n   * The entire row, you can display anything from this row in your child component.\r\n   */\r\n  \r\n  row: any;\r\n\r\n  \r\n  rowIndex: number;\r\n\r\n  \r\n  openChildren: number[];\r\n\r\n  \r\n  childContentsDirective: SharkDynamicContentsDirective;\r\n\r\n  childOpen: boolean;\r\n\r\n  componentRef: ComponentRef<SharkDynamicContents>;\r\n\r\n  constructor(private tableUtils: SharkTableUtils, private componentFactoryResolver: ComponentFactoryResolver,\r\n              private changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.loadComponent();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('openChildren') && !changes['openChildren'].isFirstChange()) {\r\n      this.childOpen = changes['openChildren'].currentValue.indexOf(this.rowIndex) > -1;\r\n      this.componentRef.instance.childOpen(this.childOpen);\r\n    }\r\n  }\r\n\r\n  private loadComponent(): void {\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\r\n    const viewContainerRef = this.childContentsDirective.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.componentRef.instance.data = this.row;\r\n\r\n    // without this, everything went boom\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'shark-child',\r\n  template: `\r\n      <ng-template sharkDynamicContents></ng-template>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharkTableUtils, },\n{type: ComponentFactoryResolver, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'component': [{ type: Input },],\n'row': [{ type: Input },],\n'rowIndex': [{ type: Input },],\n'openChildren': [{ type: Input },],\n'childContentsDirective': [{ type: ViewChild, args: [SharkDynamicContentsDirective, ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}