{"version":3,"sources":["../../src/table.body.component.ts"],"names":[],"mappings":"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","file":"table.body.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, Type } from '@angular/core';\r\nimport { SharkColumn } from './column';\r\nimport { Router } from '@angular/router';\r\nimport { SharkTableUtils } from './table.utils';\r\nimport { SharkDynamicContents } from './dynamic/dynamic.contents';\r\nimport { Page } from './page';\r\n\r\n/**\r\n * This component controls each row in the table.\r\n */\r\n\r\nexport class SharkTableBodyComponent implements OnChanges {\r\n\r\n    \r\n    currentColumns: SharkColumn[];\r\n\r\n    \r\n    columns: SharkColumn[];\r\n\r\n    \r\n    localFilter: boolean;\r\n\r\n    \r\n    localPaging: boolean;\r\n\r\n    \r\n    columnFiltering: boolean;\r\n\r\n    \r\n    filter: string;\r\n\r\n    \r\n    rowStylingFunction: RowStyleFunction;\r\n\r\n    \r\n    cellStylingFunction: CellStyleFunction;\r\n\r\n    \r\n    childRows: boolean;\r\n\r\n    \r\n    childComponent: Type<SharkDynamicContents>;\r\n\r\n    \r\n    linkTarget: string;\r\n\r\n    \r\n    linkKey: string;\r\n\r\n    \r\n    tableEmptyMessage: string;\r\n\r\n    \r\n    page: Page;\r\n\r\n    openChildren: number[] = [];\r\n\r\n    constructor(private router: Router, private tableUtils: SharkTableUtils) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n      if (changes.hasOwnProperty('page') && !changes['page'].isFirstChange()) {\r\n        this.openChildren = [];\r\n      }\r\n    }\r\n\r\n    addStyleToCell(row: any, column: SharkColumn): { [key: string]: string; } | {} {\r\n      if (this.cellStylingFunction) {\r\n        const cellData = this.tableUtils.retrieveCell(row, column);\r\n        return this.cellStylingFunction(row, column, cellData);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    childOpen(index: number) {\r\n      return this.openChildren.indexOf(index) > -1;\r\n    }\r\n\r\n    /**\r\n     * Toggle the show/hide status of the child row\r\n     */\r\n    toggleChild(index: number): void {\r\n        if (this.openChildren.indexOf(index) > -1) {\r\n          this.openChildren.splice(this.openChildren.indexOf(index), 1);\r\n        } else {\r\n          this.openChildren.push(index);\r\n        }\r\n        this.openChildren = this.openChildren.slice(0);\r\n    }\r\n\r\n    /**\r\n     * If provided, navigate to link for this row using the router.\r\n     *\r\n     * @param {Object} row\r\n     */\r\n    rowClick(row: Object): void {\r\n        if (this.linkTarget && this.linkKey) {\r\n            this.router.navigate([this.linkTarget, this.tableUtils.findValue(row, this.linkKey)]);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: '[shark-table-body]',\r\n    template: `\r\n        <ng-container *ngIf=\"page.content && currentColumns.length > 0\">\r\n          <ng-container *ngFor=\"let row of (page.content | localfilter:currentColumns:localFilter:localPaging:columnFiltering:filter); let e = even; let o = odd; let i = index;\">\r\n            <tr class=\"data-row\"\r\n                [ngClass]=\"{ odd: o, even: e, rowLink: linkTarget, rowOpen: childOpen(i) }\"\r\n                [ngStyle]=\"rowStylingFunction(row)\"\r\n                (click)=\"rowClick(row)\" (keyup.enter)=\"rowClick(row)\"\r\n                [attr.tabindex]=\"linkTarget ? 0 : null\"\r\n            >\r\n                <td class=\"header-buttons\" *ngIf=\"childRows\">\r\n                  <button class=\"black-arrow fa fa-fw\"\r\n                          [attr.aria-expanded]=\"childOpen(i)\"\r\n                          [ngClass]=\"{ 'open': childOpen(i), 'closed': !childOpen(i), 'fa-caret-down': childOpen(i), 'fa-caret-right': !childOpen(i) }\"\r\n                          (click)=\"toggleChild(i)\" type=\"button\" aria-label=\"Details Row\"\r\n                  >\r\n                  </button>\r\n                </td>\r\n                <ng-container *ngFor=\"let column of currentColumns\">\r\n                    <td [ngClass]=\"{'right': column.alignRight }\" [ngStyle]=\"addStyleToCell(row, column)\">\r\n                        <shark-table-cell [column]=\"column\" [row]=\"row\"></shark-table-cell>\r\n                    </td>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngIf=\"childRows\" class=\"data-row child-row\" [ngClass]=\"{ odd: o, even: e, rowOpen: childOpen(i) }\" [hidden]=\"!childOpen(i)\">\r\n                <td></td>\r\n                <td [attr.colspan]=\"currentColumns.length\">\r\n                    <shark-child [component]=\"childComponent\" [row]=\"row\" [rowIndex]=\"i\" [openChildren]=\"openChildren\"></shark-child>\r\n                </td>\r\n            </tr>\r\n          </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"currentColumns.length === 0\">\r\n          <tr><td [attr.colspan]=\"childRows ? columns.length + 1 : columns.length\">There are no columns selected</td></tr>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"(!page.content || page.content.length == 0) && currentColumns.length > 0\">\r\n          <tr><td [attr.colspan]=\"childRows ? currentColumns.length + 1 : currentColumns.length\">{{ tableEmptyMessage }}</td></tr>\r\n        </ng-container>\r\n    `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: SharkTableUtils, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'currentColumns': [{ type: Input },],\n'columns': [{ type: Input },],\n'localFilter': [{ type: Input },],\n'localPaging': [{ type: Input },],\n'columnFiltering': [{ type: Input },],\n'filter': [{ type: Input },],\n'rowStylingFunction': [{ type: Input },],\n'cellStylingFunction': [{ type: Input },],\n'childRows': [{ type: Input },],\n'childComponent': [{ type: Input },],\n'linkTarget': [{ type: Input },],\n'linkKey': [{ type: Input },],\n'tableEmptyMessage': [{ type: Input },],\n'page': [{ type: Input },],\n};\n}\r\n\r\nexport interface RowStyleFunction {\r\n\r\n  /**\r\n   * Sends in the current row data and returns an object to be\r\n   * used in conjunction with NgStyle with the format like:\r\n   *\r\n   * { 'background-color': 'red' }\r\n   */\r\n  (row: any): {\r\n    [key: string]: string;\r\n  } | {};\r\n}\r\n\r\nexport interface CellStyleFunction {\r\n\r\n  /**\r\n   * Sends in the current row data and returns an object to be\r\n   * used in conjunction with NgStyle with the format like:\r\n   *\r\n   * { 'background-color': 'red' }\r\n   */\r\n  (row: any, column: SharkColumn, cell: any): {\r\n    [key: string]: string;\r\n  } | {};\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}