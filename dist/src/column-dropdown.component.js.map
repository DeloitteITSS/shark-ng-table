{"version":3,"sources":["../../src/column-dropdown.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,UAAA,EAAY,YAAA,EAAc,YAAA,EAAc,KAAA,EAAO,MAAA,EAAQ,SAAA,EACnE,MAAM,eAAA,CAAgB;AAKvB;IAeE,sCAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAJ1C,iBAAY,GAAG,IAAI,YAAY,EAAiB,CAAC;QAEjD,iBAAY,GAAG,KAAK,CAAC;IAEwB,CAAC;IAG9C,8DAAuB,GAAvB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC5C,CAAC;IACH,CAAC;IAID,oDAAa,GAAb,UAAc,KAAY;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,mDAAY,GAAZ;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACI,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,uBAAuB;oBACjC,QAAQ,EAAE,63BAeT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;KACnB,EAF6F,CAE7F,CAAC;IACK,2CAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;QACpE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACrC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACnC,yBAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,yBAAyB,EAAE,EAAE,EAAG,EAAE,EAAE;QAC7F,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAE,QAAQ,CAAE,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,qBAAqB,EAAE,CAAE,QAAQ,CAAE,EAAG,EAAE,EAAE;KACzJ,CAAC;IACF,mCAAC;CArED,AAqEC,IAAA;SArEY,4BAA4B","file":"column-dropdown.component.js","sourceRoot":"","sourcesContent":["import {\r\n  Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild\r\n} from '@angular/core';\r\nimport { SharkColumn } from './column';\r\nimport { NotifierService } from './notifier/notifier.service';\r\n\r\n\r\nexport class SharkColumnDropdownComponent {\r\n  \r\n  dropdownButton: ElementRef;\r\n\r\n  \r\n  columns: SharkColumn[];\r\n\r\n  \r\n  notifierService: NotifierService;\r\n\r\n  \r\n  columnChange = new EventEmitter<SharkColumn[]>();\r\n\r\n  showDropDown = false;\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  \r\n  closeDropDownWithEscape(): void {\r\n    if (this.showDropDown) {\r\n      this.showDropDown = false;\r\n      this.dropdownButton.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  closeDropDown(event: Event): void {\r\n    if (!this.elementRef.nativeElement.contains(event.target)) {\r\n      this.showDropDown = false;\r\n    }\r\n  }\r\n\r\n  emitSelected(): void {\r\n    this.columnChange.emit(this.columns);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'shark-column-dropdown',\r\n  template: `\r\n    <span class=\"column-picker\">\r\n        <button class=\"toggle-dropdown\" (click)=\"showDropDown = !showDropDown\" [attr.aria-expanded]=\"showDropDown\" aria-controls=\"column-picker-dropdown\" type=\"button\" #dropdownButton>\r\n          <span>Choose Columns<i class=\"fa fa-fw fa-angle-down\"></i></span>\r\n        </button>\r\n        <div id=\"column-picker-dropdown\" class=\"dropdown\" [attr.aria-hidden]=\"!showDropDown\" aria-label=\"submenu\" [ngStyle]=\"{'display': showDropDown ? 'block': 'none'}\">\r\n          <fieldset>\r\n            <legend class=\"screen-reader\">Columns to display</legend>\r\n            <label *ngFor=\"let column of columns\">\r\n              <input type=\"checkbox\" [(ngModel)]=\"column.displayed\" (ngModelChange)=\"emitSelected(column)\" />\r\n              {{ column.header }}\r\n            </label>\r\n          </fieldset>\r\n        </div>\r\n    </span>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dropdownButton': [{ type: ViewChild, args: ['dropdownButton', ] },],\n'columns': [{ type: Input },],\n'notifierService': [{ type: Input },],\n'columnChange': [{ type: Output },],\n'closeDropDownWithEscape': [{ type: HostListener, args: ['document:keydown.escape', [], ] },],\n'closeDropDown': [{ type: HostListener, args: ['document:click', [ '$event' ], ] },{ type: HostListener, args: ['document:touchstart', [ '$event' ], ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}