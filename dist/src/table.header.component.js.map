{"version":3,"sources":["../../src/table.header.component.ts"],"names":[],"mappings":"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","file":"table.header.component.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\n\r\nimport { SharkColumn } from './column';\r\nimport { Page } from './page';\r\nimport { SharkSortChangeEvent } from './header-button.component';\r\nimport { NotifierService } from './notifier/notifier.service';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n\r\nexport class SharkTableHeaderComponent {\r\n\r\n    \r\n    sortable: boolean;\r\n\r\n    \r\n    columns: SharkColumn[];\r\n\r\n    \r\n    columnOrdering: boolean;\r\n\r\n    \r\n    childRows: boolean;\r\n\r\n    \r\n    page: Page;\r\n\r\n    \r\n    filterable: boolean;\r\n\r\n    \r\n    columnFiltering: boolean;\r\n\r\n    \r\n    filter: string;\r\n\r\n    \r\n    showFilterPlaceholders: boolean;\r\n\r\n    \r\n    notifierService: NotifierService;\r\n\r\n    \r\n    localPagingSize: number;\r\n\r\n    \r\n    sortChange = new EventEmitter<SharkSortChangeEvent>();\r\n\r\n    \r\n    filterChange = new EventEmitter<SharkHeaderFilterChange>();\r\n\r\n    \r\n    columnChange = new EventEmitter<SharkColumn[]>();\r\n\r\n    constructor( private document: any) {}\r\n\r\n    dispatchSortChangeEvent(event: SharkSortChangeEvent): void {\r\n      this.sortChange.emit(event);\r\n    }\r\n\r\n    fireFilterChange(): void {\r\n        this.filterChange.emit({\r\n          columns: this.columns,\r\n          filter: this.filter,\r\n          localPagingSize: this.localPagingSize\r\n        });\r\n    }\r\n\r\n    moveColumnForward(index: number, column: SharkColumn): void {\r\n      this.move(index, 1);\r\n      this.notifierService.postMessage('column moved right');\r\n\r\n      const newIndex = this.columns.indexOf(column);\r\n      setTimeout(() => {\r\n        if (newIndex === this.columns.length - 1) {\r\n          this.focusButton(column, 'left');\r\n        } else {\r\n          this.focusButton(column, 'right');\r\n        }\r\n      }, 100);\r\n    }\r\n\r\n    moveColumnBackward(index: number, column: SharkColumn): void {\r\n      this.move(index, -1);\r\n      this.notifierService.postMessage('column moved left');\r\n\r\n      const newIndex = this.columns.indexOf(column);\r\n      setTimeout(() => {\r\n        if (newIndex === 0) {\r\n          this.focusButton(column, 'right');\r\n        } else {\r\n          this.focusButton(column, 'left');\r\n        }\r\n      }, 100);\r\n    }\r\n\r\n    private focusButton(column: SharkColumn, dir: string): void {\r\n      const button = document.getElementById(column.property + '-' + dir);\r\n      if (button) {\r\n        button.focus();\r\n      }\r\n    }\r\n\r\n    private move(index: number, offset: number): void {\r\n      const newIndex = index + offset;\r\n      if (newIndex > -1 && newIndex < this.columns.length) {\r\n        const removedElement = this.columns.splice(index, 1)[0];\r\n        this.columns.splice(newIndex, 0, removedElement);\r\n      }\r\n\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: '[shark-table-header]',\r\n    template: `\r\n        <tr class=\"header-row header-border\" *ngIf=\"columns.length > 0\">\r\n            <th id=\"childHeader\" *ngIf=\"childRows\" class=\"child-spacer\">\r\n              <span class=\"screen-reader\">Details</span>\r\n            </th>\r\n            <th class=\"header-buttons\" [ngClass]=\"{'right': column.alignRight }\"\r\n                *ngFor=\"let column of columns; let i = index; let f = first; let l = last;\" \r\n                [attr.id]=\"column.property\"\r\n                [attr.aria-sort]=\"(!sortable || column.unsortable) ? null : (!column.sortType || column.sortType === 0) ? 'none' : column.sortType === 1 ? 'ascending' : 'descending'\">\r\n                <button *ngIf=\"columnOrdering && !f\" (click)=\"moveColumnBackward(i, column)\" type=\"button\" class=\"ordering-button fa fa-angle-left\" [id]=\"column.property + '-left'\">\r\n                  <span class=\"screen-reader-button-label\">{{ 'Move the ' + column.header + ' column left' }}</span>\r\n                </button>\r\n                <shark-table-header-button *ngIf=\"sortable && !column.unsortable\" [column]=\"column\" (sortChange)=\"dispatchSortChangeEvent($event)\"></shark-table-header-button>\r\n                <ng-container *ngIf=\"!sortable || column.unsortable\">\r\n                  {{ column.header }}\r\n                </ng-container>\r\n                <button *ngIf=\"columnOrdering && !l\" (click)=\"moveColumnForward(i, column)\" type=\"button\" class=\"ordering-button fa fa-angle-right\" [id]=\"column.property + '-right'\">\r\n                  <span class=\"screen-reader-button-label\">{{ 'Move the ' + column.header + ' column right' }}</span>\r\n                </button>\r\n                <div *ngIf=\"columnFiltering && filterable\">\r\n                  <label [for]=\"'column-' + i\" class=\"screen-reader\">{{ column.header }} filter</label>\r\n                  <input type=\"text\" name=\"column{{i}}\" [id]=\"'column-' + i\" [(ngModel)]=\"column.filter\" (ngModelChange)=\"fireFilterChange()\" [attr.placeholder]=\"showFilterPlaceholders ? (column.header + ' filter') : null\" />\r\n                </div>\r\n            </th>\r\n        </tr>\r\n    `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sortable': [{ type: Input },],\n'columns': [{ type: Input },],\n'columnOrdering': [{ type: Input },],\n'childRows': [{ type: Input },],\n'page': [{ type: Input },],\n'filterable': [{ type: Input },],\n'columnFiltering': [{ type: Input },],\n'filter': [{ type: Input },],\n'showFilterPlaceholders': [{ type: Input },],\n'notifierService': [{ type: Input },],\n'localPagingSize': [{ type: Input },],\n'sortChange': [{ type: Output },],\n'filterChange': [{ type: Output },],\n'columnChange': [{ type: Output },],\n};\n}\r\n\r\nexport interface SharkHeaderFilterChange {\r\n  columns: SharkColumn[];\r\n  filter: string;\r\n  localPagingSize: number;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}