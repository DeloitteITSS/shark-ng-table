{"version":3,"sources":["../../../src/notifier/aria-notifier.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAA2C,MAAO,eAAA,CAAgB;AAKtF;IAAA;IA4CA,CAAC;IAnCC,2CAAW,GAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;gBACxC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IAED,2CAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;IACH,CAAC;IAEO,mDAAmB,GAA3B;QAAA,iBAKC;QAJC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAC,OAAO;YACnF,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC;YACtB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,GAAG,EAAE,EAAhB,CAAgB,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IACI,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE,6GAAuG;iBAClH,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,oCAAc,GAA2C;QAChE,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACpC,CAAC;IACF,4BAAC;CA5CD,AA4CC,IAAA;SA5CY,qBAAqB","file":"aria-notifier.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { NotifierService } from './notifier.service';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n\r\nexport class AriaNotifierComponent implements OnChanges, OnDestroy {\r\n\r\n  status: string;\r\n\r\n  \r\n  notifierService: NotifierService;\r\n\r\n  private notifierSubscription: Subscription;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('notifierService')) {\r\n      if (!this.notifierSubscription) {\r\n        this.subscribeToNotifier();\r\n      } else {\r\n        this.notifierSubscription.unsubscribe();\r\n        this.subscribeToNotifier();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.notifierSubscription) {\r\n      this.notifierSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private subscribeToNotifier() {\r\n    this.notifierSubscription = this.notifierService.messageObservable.subscribe((message) => {\r\n      this.status = message;\r\n      setTimeout(() => this.status = '', 1000);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'shark-table-aria-notifier',\r\n  template: `<div class=\"notification-area screen-reader\" aria-atomic=\"true\" aria-live=\"polite\">{{ status }}</div>`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'notifierService': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}