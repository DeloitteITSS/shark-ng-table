{"version":3,"sources":["../../src/table.utils.ts"],"names":[],"mappings":"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","file":"table.utils.js","sourceRoot":"","sourcesContent":["import { SharkColumn } from './column';\r\nimport { Injectable, PipeTransform, Type } from '@angular/core';\r\n\r\n\r\nexport class SharkTableUtils {\r\n\r\n  public exportRow(row: Object, columns: SharkColumn[], rendered: boolean): Object {\r\n    let newRow = {};\r\n\r\n    Object.keys(row).forEach(key => {\r\n      const col = columns.filter(col => col.displayed).find(col => col.property === key);\r\n      if (col) {\r\n        newRow[ key ] = this.retrieveCell(row, col, rendered);\r\n      }\r\n    });\r\n\r\n    return newRow;\r\n  }\r\n\r\n  public retrieveCell(row: Object, column: SharkColumn, rendered: boolean = true): string {\r\n    const cell = this.findValue(row, column.property);\r\n\r\n    if (column.pipe && rendered) {\r\n      return this.applyPipe(column.pipe, cell, column.pipeArgs, column.pipeConstructorArgs);\r\n    }\r\n\r\n    return cell;\r\n  }\r\n\r\n  public applyPipe(pipe: Type<PipeTransform>, cell,  pipeArgs: any[], pipeConstructorArgs: any[]): string {\r\n    const pipeInstance = new pipe(...pipeConstructorArgs);\r\n    return pipeInstance.transform(cell, ...pipeArgs);\r\n  }\r\n\r\n  public filter(items: any, cols: SharkColumn[], columnFiltering: boolean, filterText: string) {\r\n    return items.filter((row) => {\r\n      let found = false;\r\n\r\n      if (columnFiltering && this.hasFilter(cols)) {\r\n          let rowFound = false;\r\n\r\n          // Not using forEach here because we needed to break when a false match occurs during column filtering\r\n          for (const col of cols) {\r\n            const value = this.retrieveCell(row, col) + '';\r\n            const search = col.filter ? col.filter : '';\r\n\r\n            if (search.length > 0) {\r\n              if (value && (value.toLowerCase().indexOf(search.toLowerCase()) !== -1)) {\r\n                rowFound = true;\r\n              } else {\r\n                rowFound = false;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          found = rowFound;\r\n      } else if (columnFiltering && !this.hasFilter(cols)) {\r\n          return true;\r\n      } else if (filterText) {\r\n          cols.forEach((col: SharkColumn) => {\r\n              const value = this.retrieveCell(row, col) + '';\r\n              if (filterText && value && (value.toLowerCase().indexOf(filterText.toLowerCase()) !== -1)) {\r\n                  found = true;\r\n              }\r\n          });\r\n      }\r\n\r\n      return found;\r\n    });\r\n  }\r\n\r\n  public findValue(input: Object, key: string): any {\r\n    const arr = key.split('.');\r\n    while (arr.length && (input = input[arr.shift()])) {};\r\n    return input;\r\n  }\r\n\r\n  public hasFilter(cols: SharkColumn[]): boolean {\r\n    return cols.filter((col) => col.filter && col.filter.length > 0).length > 0;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}